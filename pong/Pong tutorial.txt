1. SETUP
import pygame
import sys

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    #updates window
    pygame.display.flip()
    clock.tick(60)


TYPES OF SURFACES
DISPLAY SURFACE- ONLY 1, EVERYTHING EXISTS ON IT
REGULAR SURFACE- SUBSURCFACE ON TOP OF DISPLAY, CAN HAVE INF
RECT- RECTANGLES YOU CAN PUT ONTO DISPLAY

2. DRAWING SHAPES

import pygame
import sys

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))
    #updates window
    pygame.display.flip()
    clock.tick(60)


3. ANIMATIONS
import pygame
import sys

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7
ball_speed_y = 7

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0 or ball.right >= screenWidth:
        ball_speed_x *= -1
    
    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))
    #updates window
    pygame.display.flip()
    clock.tick(60)

4. INPUT
import pygame
import sys

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7
ball_speed_y = 7
player_speed = 0

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7


    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0 or ball.right >= screenWidth:
        ball_speed_x *= -1

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))
    #updates window
    pygame.display.flip()
    clock.tick(60)

5. OPPONENT
Opponents top above ball -> MOVE DOWN
Opponents bottom below ball -> MOVE UP
DIFFICULTY IS IN THE SPEED

import pygame
import sys

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7
ball_speed_y = 7
player_speed = 0
opponent_speed = 7

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7


    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0 or ball.right >= screenWidth:
        ball_speed_x *= -1

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))
    #updates window
    pygame.display.flip()
    clock.tick(60)

6. Ball reset
import pygame
import sys
import random



def ballRestart():
    global ball_speed_y, ball_speed_x
    ball.center = (screenWidth/2, screenHeight/2)
    ball_speed_y *= random.choice((1,-1))
    ball_speed_x *= random.choice((1,-1))

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7


    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0 or ball.right >= screenWidth:
        ballRestart()

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))
    #updates window
    pygame.display.flip()
    clock.tick(60)

7. SCORE 
import pygame
import sys
import random

def ballRestart():
    global ball_speed_y, ball_speed_x
    ball.center = (screenWidth/2, screenHeight/2)
    ball_speed_y *= random.choice((1,-1))
    ball_speed_x *= random.choice((1,-1))

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

#text variables
player_score = 0
opponent_score = 0
game_font = pygame.font.Font("freesansbold.ttf", 32)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7

    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0:
        player_score += 1
        ballRestart()
    if ball.right >= screenWidth:
        opponent_score += 1
        ballRestart()

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))

    #texts
    player_text = game_font.render(f"{player_score}",False,lightGrey)
    screen.blit(player_text, (495, 360))
    opponent_text = game_font.render(f"{opponent_score}", False, lightGrey)
    screen.blit(opponent_text, (450, 360))

    #updates window
    pygame.display.flip()
    clock.tick(60)

8. BALL TIMER
import pygame
import sys
import random

def ballRestart():
    global ball_speed_y, ball_speed_x, score_time
    current_time = pygame.time.get_ticks()
    ball.center = (screenWidth/2, screenHeight/2)

    if current_time - score_time < 2100:
        ball_speed_x = 0
        ball_speed_y = 0
    else:
        ball_speed_y = 7 * random.choice((1,-1))
        ball_speed_x = 7 * random.choice((1,-1))
        score_time = None

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

#text variables
player_score = 0
opponent_score = 0
game_font = pygame.font.Font("freesansbold.ttf", 32)

#score timer
score_time = None

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7

    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0:
        player_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()
    if ball.right >= screenWidth:
        opponent_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))

    #ball restart
    if score_time :
        ballRestart()

    #texts
    player_text = game_font.render(f"{player_score}",False,lightGrey)
    screen.blit(player_text, (495, 360))
    opponent_text = game_font.render(f"{opponent_score}", False, lightGrey)
    screen.blit(opponent_text, (450, 360))

    #updates window
    pygame.display.flip()
    clock.tick(60)

9. BALL TIMER WITH COUNTDOWN
import pygame
import sys
import random

def ballRestart():
    global ball_speed_y, ball_speed_x, score_time
    current_time = pygame.time.get_ticks()
    ball.center = (screenWidth/2, screenHeight/2)

    if current_time - score_time < 700:
        number_three = game_font.render("3", False, lightGrey)
        screen.blit(number_three, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 700 < current_time - score_time < 1400:
        number_two = game_font.render("2", False, lightGrey)
        screen.blit(number_two, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 1400 < current_time - score_time < 2100:
        number_one = game_font.render("1", False, lightGrey)
        screen.blit(number_one, (screenWidth/2 - 10, screenHeight/2 - 50))

    if current_time - score_time < 2100:
        ball_speed_x = 0
        ball_speed_y = 0
    else:
        ball_speed_y = 7 * random.choice((1,-1))
        ball_speed_x = 7 * random.choice((1,-1))
        score_time = None

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

#text variables
player_score = 0
opponent_score = 0
game_font = pygame.font.Font("freesansbold.ttf", 32)

#score timer
score_time = True

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7

    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0:
        player_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()
    if ball.right >= screenWidth:
        opponent_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()

    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))

    #ball restart
    if score_time :
        ballRestart()

    #texts
    player_text = game_font.render(f"{player_score}",False,lightGrey)
    screen.blit(player_text, (495, 360))
    opponent_text = game_font.render(f"{opponent_score}", False, lightGrey)
    screen.blit(opponent_text, (450, 360))

    #updates window
    pygame.display.flip()
    clock.tick(60)

10. BETTER COLLISIONS
import pygame
import sys
import random

def ballRestart():
    global ball_speed_y, ball_speed_x, score_time
    current_time = pygame.time.get_ticks()
    ball.center = (screenWidth/2, screenHeight/2)

    if current_time - score_time < 700:
        number_three = game_font.render("3", False, lightGrey)
        screen.blit(number_three, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 700 < current_time - score_time < 1400:
        number_two = game_font.render("2", False, lightGrey)
        screen.blit(number_two, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 1400 < current_time - score_time < 2100:
        number_one = game_font.render("1", False, lightGrey)
        screen.blit(number_one, (screenWidth/2 - 10, screenHeight/2 - 50))

    if current_time - score_time < 2100:
        ball_speed_x = 0
        ball_speed_y = 0
    else:
        ball_speed_y = 7 * random.choice((1,-1))
        ball_speed_x = 7 * random.choice((1,-1))
        score_time = None

pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

#text variables
player_score = 0
opponent_score = 0
game_font = pygame.font.Font("freesansbold.ttf", 32)

#score timer
score_time = True

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7

    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        ball_speed_y *=-1
    if ball.left <= 0:
        player_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()
    if ball.right >= screenWidth:
        opponent_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()

    if ball.colliderect(player) and ball_speed_x > 0:
        if abs(ball.right - player.left) < 10:
            ball_speed_x *= -1
        elif abs(ball.bottom - player.top) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
        elif abs(ball.top - player.bottom) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
    if ball.colliderect(opponent) and ball_speed_x < 0:
        if abs(ball.left - opponent.right) < 10:
            ball_speed_x *= -1
        elif abs(ball.bottom - opponent.top) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
        elif abs(ball.top - opponent.bottom) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))

    #ball restart
    if score_time :
        ballRestart()

    #texts
    player_text = game_font.render(f"{player_score}",False,lightGrey)
    screen.blit(player_text, (495, 360))
    opponent_text = game_font.render(f"{opponent_score}", False, lightGrey)
    screen.blit(opponent_text, (450, 360))

    #updates window
    pygame.display.flip()
    clock.tick(60)

11. SOUND
import pygame
import sys
import random

def ballRestart():
    global ball_speed_y, ball_speed_x, score_time
    current_time = pygame.time.get_ticks()
    ball.center = (screenWidth/2, screenHeight/2)

    if current_time - score_time < 700:
        number_three = game_font.render("3", False, lightGrey)
        screen.blit(number_three, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 700 < current_time - score_time < 1400:
        number_two = game_font.render("2", False, lightGrey)
        screen.blit(number_two, (screenWidth/2 - 10, screenHeight/2 - 50))
    if 1400 < current_time - score_time < 2100:
        number_one = game_font.render("1", False, lightGrey)
        screen.blit(number_one, (screenWidth/2 - 10, screenHeight/2 - 50))

    if current_time - score_time < 2100:
        ball_speed_x = 0
        ball_speed_y = 0
    else:
        ball_speed_y = 7 * random.choice((1,-1))
        ball_speed_x = 7 * random.choice((1,-1))
        score_time = None

pygame.mixer.pre_init(44100, -16, 2, 512)
pygame.init()
clock = pygame.time.Clock()

screenWidth = 960
screenHeight = 720
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption('Pong')

ball = pygame.Rect(screenWidth/2 - 15, screenHeight/2 - 15, 30,30)
player = pygame.Rect(screenWidth -20, screenHeight/2 - 70, 10, 140)
opponent = pygame.Rect(10, screenHeight/2 - 70, 10, 140)

black = (0,0,0)
lightGrey = (200,200,200)

ball_speed_x = 7 * random.choice((1,-1))
ball_speed_y = 7 * random.choice((1,-1))
player_speed = 0
opponent_speed = 7

#text variables
player_score = 0
opponent_score = 0
game_font = pygame.font.Font("freesansbold.ttf", 32)

#score timer
score_time = True

#Sound
pong_sound = pygame.mixer.Sound("pong.ogg")
score_sound = pygame.mixer.Sound("score.ogg")

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                player_speed += 7
            if event.key == pygame.K_UP:
                player_speed -= 7
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                player_speed -= 7
            if event.key == pygame.K_UP:
                player_speed += 7

    #show him what happens when you add just these two lines
    ball.x += ball_speed_x
    ball.y += ball_speed_y
    #then add collisions
    if ball.top <= 0 or ball.bottom >= screenHeight:
        pygame.mixer.Sound.play(pong_sound)
        ball_speed_y *=-1
    if ball.left <= 0:
        pygame.mixer.Sound.play(score_sound)
        player_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()
    if ball.right >= screenWidth:
        pygame.mixer.Sound.play(score_sound)
        opponent_score += 1
        #ballRestart()
        score_time = pygame.time.get_ticks()

    if ball.colliderect(player) and ball_speed_x > 0:
        pygame.mixer.Sound.play(pong_sound)
        if abs(ball.right - player.left) < 10:
            ball_speed_x *= -1
        elif abs(ball.bottom - player.top) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
        elif abs(ball.top - player.bottom) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
    if ball.colliderect(opponent) and ball_speed_x < 0:
        pygame.mixer.Sound.play(pong_sound)
        if abs(ball.left - opponent.right) < 10:
            ball_speed_x *= -1
        elif abs(ball.bottom - opponent.top) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1
        elif abs(ball.top - opponent.bottom) < 10 and ball_speed_y > 0:
            ball_speed_y *= -1

    #player animation
    player.y += player_speed
    if player.top <= 0:
        player.top = 0
    if player.bottom >= screenHeight:
        player.bottom = screenHeight

    #opponent animation
    if opponent.top < ball.y:
        opponent.top += opponent_speed
    if opponent.bottom > ball.y:
        opponent.bottom -= opponent_speed
    if opponent.top <= 0:
        opponent.top = 0
    if opponent.bottom >= screenHeight:
        opponent.bottom = screenHeight

    #visuals
    screen.fill(black)
    pygame.draw.rect(screen, lightGrey, player)
    pygame.draw.rect(screen, lightGrey, opponent)
    pygame.draw.ellipse(screen, lightGrey, ball)
    pygame.draw.aaline(screen,lightGrey, (screenWidth/2,0), (screenWidth/2,screenHeight))

    #ball restart
    if score_time :
        ballRestart()

    #texts
    player_text = game_font.render(f"{player_score}",False,lightGrey)
    screen.blit(player_text, (495, 360))
    opponent_text = game_font.render(f"{opponent_score}", False, lightGrey)
    screen.blit(opponent_text, (450, 360))

    #updates window
    pygame.display.flip()
    clock.tick(60)