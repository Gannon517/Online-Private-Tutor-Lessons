// Step 1: draw a maze 

import turtle

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"X  XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXX  XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXX  XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()

pen = Pen()

setup_maze(levels[1])

while True:
    pass


// Step 2: Add the player ----------------------------------------------------------------------------------------

import turtle

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXX  XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXX  XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()
            if character == "P":
                player.goto(screen_x, screen_y)

pen = Pen()
player = Player()

setup_maze(levels[1])

while True:
    pass

// Part 3: move the player ---------------------------------------------------------------------------------------------------------

import turtle

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)

    def go_up(self):
        self.goto(self.xcor(), self.ycor() + 24)

    def go_down(self):
        self.goto(self.xcor(), self.ycor() - 24)
    
    def go_left(self):
        self.goto(self.xcor() - 24, self.ycor())

    def go_right(self):
        self.goto(self.xcor() + 24, self.ycor())

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXX  XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXX  XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()
            if character == "P":
                player.goto(screen_x, screen_y)

#make our objects
pen = Pen()
player = Player()
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")
#turn off screen updates
screen.tracer(0)
#Main game loop
while True:
    screen.update()

// Part 4: Add collisions ---------------------------------------------------------------------------------------------------
import turtle

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)

    def go_up(self):
        dx = player.xcor()
        dy = player.ycor() + 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_down(self):
        dx = player.xcor()
        dy = player.ycor() - 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)
    
    def go_left(self):
        dx = player.xcor() - 24
        dy = player.ycor()

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_right(self):
        dx = player.xcor() + 24
        dy = player.ycor()

        if (dx, dy) not in walls:
            self.goto(dx, dy)

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXX  XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXX  XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()
                #add coordinate to wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

#make our objects
pen = Pen()
player = Player()
#wall list for collisions
walls = []
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")
#turn off screen updates
screen.tracer(0)
#Main game loop
while True:
    screen.update()

// Part 5: Adding treasure ---------------------------------------------------------------------------------------------------------
import turtle
import math

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up(self):
        dx = player.xcor()
        dy = player.ycor() + 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_down(self):
        dx = player.xcor()
        dy = player.ycor() - 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)
    
    def go_left(self):
        dx = player.xcor() - 24
        dy = player.ycor()

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_right(self):
        dx = player.xcor() + 24
        dy = player.ycor()

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def is_collision(self, other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        d = math.sqrt((a**2) + (b**2))

        if d < 5:
            return True
        else: 
            return False

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("circle")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x,y)

    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXXT XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXXT XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

treasures = []

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()
                #add coordinate to wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))

#make our objects
pen = Pen()
player = Player()
#wall list for collisions
walls = []
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")
#turn off screen updates
screen.tracer(0)
#Main game loop
while True:
    #Check if the player is hitting the treasure
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            treasure.destroy()
            treasures.remove(treasure)

    screen.update()

// Part 6: Images -------------------------------------------------------------------------------------------------------------

import turtle
import math

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)

turtle.register_shape("wizard_right.gif")
turtle.register_shape("wizard_left.gif")
turtle.register_shape("chest.gif")
turtle.register_shape("wall.gif")
turtle.register_shape("enemy.gif")

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("wizard_right.gif")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up(self):
        dx = player.xcor()
        dy = player.ycor() + 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_down(self):
        dx = player.xcor()
        dy = player.ycor() - 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)
    
    def go_left(self):
        dx = player.xcor() - 24
        dy = player.ycor()
        self.shape("wizard_left.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_right(self):
        dx = player.xcor() + 24
        dy = player.ycor()
        self.shape("wizard_right.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def is_collision(self, other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        d = math.sqrt((a**2) + (b**2))

        if d < 5:
            return True
        else: 
            return False

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("chest.gif")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x,y)

    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX            XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX        XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXXT XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXX                     X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXXT XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXX                   X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

treasures = []

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.shape("wall.gif")
                pen.stamp()
                #add coordinate to wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))

#make our objects
pen = Pen()
player = Player()
#wall list for collisions
walls = []
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")
#turn off screen updates
screen.tracer(0)
#Main game loop
while True:
    #Check if the player is hitting the treasure
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            treasure.destroy()
            treasures.remove(treasure)

    screen.update()

// Part 7: enemy ---------------------------------------------------------------------------------------------------------------------

import turtle
import math
import random

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)
screen.tracer(0)

turtle.register_shape("wizard_right.gif")
turtle.register_shape("wizard_left.gif")
turtle.register_shape("chest.gif")
turtle.register_shape("wall.gif")
turtle.register_shape("enemy.gif")

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("wizard_right.gif")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up(self):
        dx = player.xcor()
        dy = player.ycor() + 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_down(self):
        dx = player.xcor()
        dy = player.ycor() - 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)
    
    def go_left(self):
        dx = player.xcor() - 24
        dy = player.ycor()
        self.shape("wizard_left.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_right(self):
        dx = player.xcor() + 24
        dy = player.ycor()
        self.shape("wizard_right.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def is_collision(self, other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        d = math.sqrt((a**2) + (b**2))

        if d < 5:
            return True
        else: 
            return False

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("chest.gif")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x,y)

    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

class Enemy(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("enemy.gif")
        self.color("red")
        self.penup()
        self.speed(0)
        self.gold = 25
        self.goto(x, y)
        self.direction = random.choice(["up", "down", "left", "right"])
    
    def move(self):
        if self.direction == "up":
            dx = 0
            dy = 24
        elif self.direction == "down":
            dx = 0
            dy = -24
        elif self.direction == "left":
            dx = -24
            dy = 0
        elif self.direction == "right":
            dx = 24
            dy = 0
        else:
            dx = 0
            dy = 0
        
        moveX = self.xcor() + dx
        moveY = self.ycor() + dy

        if (moveX, moveY) not in walls:
            self.goto(moveX, moveY)
        else:
            self.direction = random.choice(["up", "down", "left", "right"])
        
        turtle.ontimer(self.move, t=random.randint(100, 300))

    def destroy(self):
        self.goto(2000, 2000)
        self.hideturtle()

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXXE           XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX      E XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXXT XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX TX",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXXE                    X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXXT XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXXE                  X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

treasures = []
enemies = []

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.shape("wall.gif")
                pen.stamp()
                #add coordinate to wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))

            if character == "E":
                enemies.append(Enemy(screen_x, screen_y))

#make our objects
pen = Pen()
player = Player()
#wall list for collisions
walls = []
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")

#start moving enemies
for enemy in enemies:
    turtle.ontimer(enemy.move, t=250)

#Main game loop
while True:
    #Check if the player is hitting the treasure
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            treasure.destroy()
            treasures.remove(treasure)
    for enemy in enemies:
        if player.is_collision(enemy):
            print("Player has died!")

    screen.update()

Part 8: final touches/ Enemy AI -----------------------------------------------------------------------------------------------------------

import turtle
import math
import random

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("A Maze Game")
screen.setup(700, 700)
screen.tracer(0)

turtle.register_shape("wizard_right.gif")
turtle.register_shape("wizard_left.gif")
turtle.register_shape("chest.gif")
turtle.register_shape("wall.gif")
turtle.register_shape("enemy.gif")

#This is my pen class, it is used to create an object
class Pen(turtle.Turtle):
    #__init__ is a initializer that classes need on how they begin their life
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("wizard_right.gif")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up(self):
        dx = player.xcor()
        dy = player.ycor() + 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_down(self):
        dx = player.xcor()
        dy = player.ycor() - 24

        if (dx, dy) not in walls:
            self.goto(dx, dy)
    
    def go_left(self):
        dx = player.xcor() - 24
        dy = player.ycor()
        self.shape("wizard_left.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def go_right(self):
        dx = player.xcor() + 24
        dy = player.ycor()
        self.shape("wizard_right.gif")
        if (dx, dy) not in walls:
            self.goto(dx, dy)

    def is_collision(self, other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        d = math.sqrt((a**2) + (b**2))

        if d < 5:
            return True
        else: 
            return False

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("chest.gif")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x,y)

    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

class Enemy(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("enemy.gif")
        self.color("red")
        self.penup()
        self.speed(0)
        self.gold = 25
        self.goto(x, y)
        self.direction = random.choice(["up", "down", "left", "right"])
    
    def move(self):
        if self.direction == "up":
            dx = 0
            dy = 24
        elif self.direction == "down":
            dx = 0
            dy = -24
        elif self.direction == "left":
            dx = -24
            dy = 0
        elif self.direction == "right":
            dx = 24
            dy = 0
        else:
            dx = 0
            dy = 0

        if self.is_close(player):
            if player.xcor() < self.xcor():
                self.direction = "left"
            elif player.xcor() > self.xcor():
                self.direction = "right"
            elif player.ycor() < self.ycor():
                self.direction = "down"
            elif player.ycor() > self.ycor():
                self.direction = "up"
        
        moveX = self.xcor() + dx
        moveY = self.ycor() + dy

        if (moveX, moveY) not in walls:
            self.goto(moveX, moveY)
        else:
            self.direction = random.choice(["up", "down", "left", "right"])
        
        turtle.ontimer(self.move, t=random.randint(100, 300))

    def is_close(self, other):
        a = self.xcor() - other.xcor()
        b = self.ycor() - other.ycor()
        d = math.sqrt((a**2) + (b**2))

        if d < 75:
            return True
        else: 
            return False

    def destroy(self):
        self.goto(2000, 2000)
        self.hideturtle()

levels = [""]

level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXXE           XXXX",
"X  XXXXXX   XXXXXXX  XXXX",
"X      XX   XXXXXXX    XX",
"X      XX   XXX      E XX",
"XXXXX  XX   XXX        XX",
"XXXXX  XX   XXXXXX  XXXXX",
"XXXXX  XX     XXXX  XXXXX",
"X  XX         XXXXT XXXXX",
"X  XX  XXXXXXXXXXXXXXXXXX",
"X        XXXXXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXXX     XXXXX TX",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX  XXXXX  X",
"XXXE                    X",
"XXX         XXXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXX              X",
"XXXT XXXXX              X",
"XXX  XXXXXXXXXXXXX  XXXXX",
"XXX   XXXXXXXXXXXX  XXXXX",
"XXX        XXXXX        X",
"XXXXXE                  X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"  
]

treasures = []
enemies = []

levels.append(level_1)

#create a setup function for a level
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]

            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.shape("wall.gif")
                pen.stamp()
                #add coordinate to wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))

            if character == "E":
                enemies.append(Enemy(screen_x, screen_y))

#make our objects
pen = Pen()
player = Player()
#wall list for collisions
walls = []
#Set up the level
setup_maze(levels[1])
#Keyboard binding
screen.listen()
screen.onkey(player.go_left,"Left")
screen.onkey(player.go_right,"Right")
screen.onkey(player.go_up,"Up")
screen.onkey(player.go_down,"Down")

#start moving enemies
for enemy in enemies:
    turtle.ontimer(enemy.move, t=250)

playing = True
#Main game loop
while playing:
    #Check if the player is hitting the treasure
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            treasure.destroy()
            treasures.remove(treasure)
    for enemy in enemies:
        if player.is_collision(enemy):
            print("Player has died!")
            playing = False
    if player.gold == 300:
        print("You have won!")
        playing = False

    screen.update()